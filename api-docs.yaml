openapi: 3.0.3
info:
  title: CMPE 202 Team Project - Authentication & User Management API
  description: |
    A comprehensive MERN stack application providing authentication and user management functionality 
    with role-based access control, campus-based user registration, and comprehensive audit logging.
    
    ## Features
    - JWT-based Authentication with refresh tokens
    - Role-based Access Control (Buyer, Seller, Admin)
    - Campus-based Registration with domain validation
    - Email Verification System
    - Password Reset functionality
    - Rate Limiting for security
    - Comprehensive Audit Logging
    - Session Management
    
    ## Security
    - Access tokens expire in 15 minutes
    - Refresh tokens expire in 7 days
    - Rate limiting: 5 failed attempts per email in 5 minutes
    - Password requirements: 8+ chars, uppercase, lowercase, number, special char
  version: 1.0.0
  contact:
    name: CMPE 202 Team 15
    email: team15@sjsu.edu
  license:
    name: ISC
    url: https://opensource.org/licenses/ISC

servers:
  - url: http://localhost:5000
    description: Development server
  - url: https://api.cmpe202-team15.com
    description: Production server

tags:
  - name: Health
    description: Server health and status endpoints
  - name: Authentication
    description: User authentication and authorization
  - name: Users
    description: User management and profile operations
  - name: Campus
    description: Campus management operations
  - name: Admin
    description: Administrative operations and monitoring

paths:
  /health:
    get:
      tags:
        - Health
      summary: Health check endpoint
      description: Check if the server is running and healthy
      responses:
        '200':
          description: Server is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Server is running"
                  timestamp:
                    type: string
                    format: date-time
                  environment:
                    type: string
                    example: "development"

  /:
    get:
      tags:
        - Health
      summary: API information
      description: Get basic API information and available endpoints
      responses:
        '200':
          description: API information
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "CMPE 202 Team Project API"
                  version:
                    type: string
                    example: "1.0.0"
                  endpoints:
                    type: object
                    properties:
                      auth:
                        type: string
                        example: "/api/auth"
                      users:
                        type: string
                        example: "/api/users"
                      campus:
                        type: string
                        example: "/api/campus"
                      admin:
                        type: string
                        example: "/api/admin"

  /api/auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Register a new user with email domain validation against campus
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - first_name
                - last_name
                - campus_id
              properties:
                email:
                  type: string
                  format: email
                  example: "student@sjsu.edu"
                password:
                  type: string
                  minLength: 8
                  example: "SecurePass123!"
                  description: "Must contain uppercase, lowercase, number, and special character"
                first_name:
                  type: string
                  maxLength: 50
                  example: "John"
                last_name:
                  type: string
                  maxLength: 50
                  example: "Doe"
                campus_id:
                  type: string
                  format: objectId
                  example: "507f1f77bcf86cd799439011"
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Validation error or user already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/auth/verify-email:
    post:
      tags:
        - Authentication
      summary: Verify user email
      description: Verify user email using token sent via email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
              properties:
                token:
                  type: string
                  example: "abc123def456ghi789"
      responses:
        '200':
          description: Email verified successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user and return JWT tokens
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: "student@sjsu.edu"
                password:
                  type: string
                  example: "SecurePass123!"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Login successful"
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
                      tokens:
                        $ref: '#/components/schemas/Tokens'
        '401':
          description: Invalid credentials or inactive account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Too many failed login attempts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RateLimitResponse'

  /api/auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh access token
      description: Get a new access token using refresh token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refreshToken
              properties:
                refreshToken:
                  type: string
                  example: "refresh_token_here"
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Token refreshed successfully"
                  data:
                    type: object
                    properties:
                      accessToken:
                        type: string
                        example: "new_jwt_access_token"
        '401':
          description: Invalid or expired refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/auth/logout:
    post:
      tags:
        - Authentication
      summary: User logout
      description: Logout user and revoke refresh token
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
                  example: "refresh_token_here"
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/auth/forgot-password:
    post:
      tags:
        - Authentication
      summary: Request password reset
      description: Send password reset email to user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  example: "student@sjsu.edu"
      responses:
        '200':
          description: Password reset email sent (if account exists)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  /api/auth/reset-password:
    post:
      tags:
        - Authentication
      summary: Reset password
      description: Reset user password using reset token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
                - password
              properties:
                token:
                  type: string
                  example: "reset_token_from_email"
                password:
                  type: string
                  minLength: 8
                  example: "NewSecurePass123!"
      responses:
        '200':
          description: Password reset successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/users/profile:
    get:
      tags:
        - Users
      summary: Get user profile
      description: Get current user's profile information
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/UserProfile'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - Users
      summary: Update user profile
      description: Update current user's profile information
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                  maxLength: 50
                  example: "Jane"
                last_name:
                  type: string
                  maxLength: 50
                  example: "Smith"
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Profile updated successfully"
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/UserProfile'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/users:
    get:
      tags:
        - Users
      summary: Get all users (Admin only)
      description: Get paginated list of all users with filtering options
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
        - name: status
          in: query
          schema:
            type: string
            enum: [pending_verification, active, suspended, deleted]
        - name: campus_id
          in: query
          schema:
            type: string
        - name: search
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      users:
                        type: array
                        items:
                          $ref: '#/components/schemas/UserProfile'
                      pagination:
                        $ref: '#/components/schemas/Pagination'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/users/{id}/roles:
    post:
      tags:
        - Users
      summary: Assign role to user (Admin only)
      description: Assign a role to a specific user
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: objectId
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - role_id
              properties:
                role_id:
                  type: string
                  format: objectId
                  example: "507f1f77bcf86cd799439011"
      responses:
        '200':
          description: Role assigned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: User already has this role or invalid data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User or role not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/campus:
    get:
      tags:
        - Campus
      summary: Get all campuses
      description: Get list of all available campuses
      responses:
        '200':
          description: Campuses retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      campuses:
                        type: array
                        items:
                          $ref: '#/components/schemas/Campus'

    post:
      tags:
        - Campus
      summary: Create new campus (Admin only)
      description: Create a new campus with unique name and email domain
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email_domain
              properties:
                name:
                  type: string
                  maxLength: 100
                  example: "University of California, Davis"
                email_domain:
                  type: string
                  format: email
                  example: "ucdavis.edu"
      responses:
        '201':
          description: Campus created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Campus created successfully"
                  data:
                    type: object
                    properties:
                      campus:
                        $ref: '#/components/schemas/Campus'
        '400':
          description: Campus with same name or domain already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/admin/dashboard:
    get:
      tags:
        - Admin
      summary: Get dashboard statistics (Admin only)
      description: Get comprehensive dashboard statistics for admin monitoring
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Dashboard statistics retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      statistics:
                        $ref: '#/components/schemas/DashboardStats'
                      recent_activities:
                        type: array
                        items:
                          $ref: '#/components/schemas/AuditLog'
                      user_growth:
                        type: array
                        items:
                          type: object
                          properties:
                            _id:
                              type: string
                              example: "2024-01-15"
                            count:
                              type: integer
                              example: 5
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/admin/audit-logs:
    get:
      tags:
        - Admin
      summary: Get audit logs (Admin only)
      description: Get paginated audit logs with filtering options
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 50
        - name: user_id
          in: query
          schema:
            type: string
        - name: action
          in: query
          schema:
            type: string
            enum: [SIGN_UP, VERIFY_EMAIL, LOGIN, LOGOUT, REFRESH, ENABLE_MFA, DISABLE_MFA, RESET_PASSWORD, CHANGE_PASSWORD, ASSIGN_ROLE, REVOKE_ROLE, SUSPEND_USER, REACTIVATE_USER]
        - name: start_date
          in: query
          schema:
            type: string
            format: date
        - name: end_date
          in: query
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Audit logs retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      audit_logs:
                        type: array
                        items:
                          $ref: '#/components/schemas/AuditLog'
                      pagination:
                        $ref: '#/components/schemas/Pagination'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/admin/login-attempts:
    get:
      tags:
        - Admin
      summary: Get login attempts (Admin only)
      description: Get paginated login attempts with filtering options
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 50
        - name: email
          in: query
          schema:
            type: string
        - name: ip_address
          in: query
          schema:
            type: string
        - name: success
          in: query
          schema:
            type: boolean
        - name: start_date
          in: query
          schema:
            type: string
            format: date
        - name: end_date
          in: query
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Login attempts retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      login_attempts:
                        type: array
                        items:
                          $ref: '#/components/schemas/LoginAttempt'
                      pagination:
                        $ref: '#/components/schemas/Pagination'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/admin/sessions:
    get:
      tags:
        - Admin
      summary: Get active sessions (Admin only)
      description: Get paginated list of active user sessions
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 50
        - name: user_id
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Sessions retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      sessions:
                        type: array
                        items:
                          $ref: '#/components/schemas/Session'
                      pagination:
                        $ref: '#/components/schemas/Pagination'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: objectId
          example: "507f1f77bcf86cd799439011"
        email:
          type: string
          format: email
          example: "student@sjsu.edu"
        first_name:
          type: string
          example: "John"
        last_name:
          type: string
          example: "Doe"
        status:
          type: string
          enum: [pending_verification, active, suspended, deleted]
          example: "active"
        campus:
          $ref: '#/components/schemas/Campus'
        roles:
          type: array
          items:
            type: string
          example: ["buyer"]

    UserProfile:
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          properties:
            full_name:
              type: string
              example: "John Doe"
            email_verified_at:
              type: string
              format: date-time
              nullable: true
            created_at:
              type: string
              format: date-time
            updated_at:
              type: string
              format: date-time

    Campus:
      type: object
      properties:
        _id:
          type: string
          format: objectId
          example: "507f1f77bcf86cd799439011"
        name:
          type: string
          example: "San Jose State University"
        email_domain:
          type: string
          example: "sjsu.edu"
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Tokens:
      type: object
      properties:
        accessToken:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        refreshToken:
          type: string
          example: "550e8400-e29b-41d4-a716-446655440000"

    AuditLog:
      type: object
      properties:
        _id:
          type: string
          format: objectId
        user_id:
          type: object
          properties:
            _id:
              type: string
              format: objectId
            email:
              type: string
            first_name:
              type: string
            last_name:
              type: string
        action:
          type: string
          enum: [SIGN_UP, VERIFY_EMAIL, LOGIN, LOGOUT, REFRESH, ENABLE_MFA, DISABLE_MFA, RESET_PASSWORD, CHANGE_PASSWORD, ASSIGN_ROLE, REVOKE_ROLE, SUSPEND_USER, REACTIVATE_USER]
        metadata:
          type: object
        created_at:
          type: string
          format: date-time

    LoginAttempt:
      type: object
      properties:
        _id:
          type: string
          format: objectId
        email:
          type: string
          format: email
        ip_address:
          type: string
        success:
          type: boolean
        created_at:
          type: string
          format: date-time

    Session:
      type: object
      properties:
        _id:
          type: string
          format: objectId
        user_id:
          type: object
          properties:
            _id:
              type: string
              format: objectId
            email:
              type: string
            first_name:
              type: string
            last_name:
              type: string
        refresh_token:
          type: string
        user_agent:
          type: string
        ip_address:
          type: string
        expires_at:
          type: string
          format: date-time
        revoked_at:
          type: string
          format: date-time
          nullable: true
        created_at:
          type: string
          format: date-time

    DashboardStats:
      type: object
      properties:
        users:
          type: object
          properties:
            total:
              type: integer
              example: 150
            active:
              type: integer
              example: 120
            pending:
              type: integer
              example: 25
            suspended:
              type: integer
              example: 5
            new_24h:
              type: integer
              example: 3
            new_7d:
              type: integer
              example: 15
        campuses:
          type: object
          properties:
            total:
              type: integer
              example: 3
        sessions:
          type: object
          properties:
            active:
              type: integer
              example: 45
        login_attempts:
          type: object
          properties:
            total_24h:
              type: integer
              example: 200
            successful_24h:
              type: integer
              example: 180
            failed_24h:
              type: integer
              example: 20
            success_rate_24h:
              type: string
              example: "90.00"

    Pagination:
      type: object
      properties:
        current_page:
          type: integer
          example: 1
        total_pages:
          type: integer
          example: 10
        total_users:
          type: integer
          example: 100
        per_page:
          type: integer
          example: 10

    AuthResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "User registered successfully"
        data:
          type: object
          properties:
            user:
              $ref: '#/components/schemas/User'

    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Operation completed successfully"

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: "Error message"
        errors:
          type: array
          items:
            type: string
          example: ["Validation error details"]

    RateLimitResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: "Too many failed login attempts. Please try again in 5 minutes."
        retryAfter:
          type: integer
          example: 300
          description: "Seconds to wait before retrying"
